rules_version = '2';
// These default Firestore rules were generated by Nx-Firebase plugin
// Change them to suit your own requirements.


service cloud.firestore {
  match /databases/{database}/documents {
    // Allow users to read and write their own document
    match /users/{userId}/{document=**} {
      allow write: if request.auth.uid == userId;
    }

    // allow group owners to modify their groups
    match /groups/{groupId}/{document=**} {
      allow create: if userFeatureAccess("createGroups");
      allow update: if request.auth.uid == resource.data.ownerUser.id;
      allow delete: if request.auth.uid == resource.data.ownerUser.id;
    }

    // allow operations for outstanding order
    match /outstanding_orders/{document=**} {
      allow create: if true;
      allow update: if request.auth.uid == resource.data.userData.id;
      allow delete: if request.auth.uid == resource.data.userData.id;
    }

    // allow operations for trading simulator
    match /trading_simulator/{simulatorId}/{document=**} {
      allow create: if userFeatureAccess("createTradingSimulator");
      allow update: if getOwnerId() && userFeatureAccess("createTradingSimulator");
      allow delete: if getOwnerId() && userFeatureAccess("createTradingSimulator");

      function getOwnerId() {
        return request.auth.uid == get(/databases/$(database)/documents/trading_simulator/$(simulatorId)).data.owner.id;
      }
    }

    // allow reading all
    match /{document=**} {
      allow read: if true;
    }

    // deny write for all document
    match /{document=**} {
      allow write: if false;
    }

    // Unified function to check user feature access
    function userFeatureAccess(featureName) {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userDoc.data.featureAccess[featureName] == true;
    }
  }
}


service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
